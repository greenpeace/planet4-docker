#!/usr/bin/env bash
set -ae

function finish {
  { set +ex; } 2>/dev/null
}
trap finish EXIT

function warning {
  >&2 echo "WARNING: $1"
}

function error {
  fatal "$1"
}

function fatal {
  >&2 echo "ERROR: $1"
  exit 1
}

function get_container_id {
  # Guesses correct container name, returns associated container ID
  docker ps --format '{{.Names}}' | grep "${BATS_IMAGE//[^[:alnum:]_]/}" | head -n1 | cut -d' ' -f1
}

function get_container_name {
  # Removes any non-alphanumeric or '_' characters,
  # in an attempt to match docker-compose service naming convention
  echo "${BATS_IMAGE//[^[:alnum:]_]/}_app_1"
}

# Used in setup function to log file, line number and function information in
# artifact storage for review and debug information
function begin_output {
  ARTIFACT_LOGS_DIR=${ARTIFACT_LOGS_DIR:-"/tmp/artifacts/logs"}
  [[ -d "$ARTIFACT_LOGS_DIR" ]] || mkdir -p "$ARTIFACT_LOGS_DIR"
  [[ -f "${ARTIFACT_LOGS_DIR}/${BATS_IMAGE}" ]] || touch "${ARTIFACT_LOGS_DIR}/${BATS_IMAGE}"
  PS4='+($(basename "$BASH_SOURCE"):${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  echo -e "=============== vvv [${BATS_TEST_NUMBER}] ${BATS_IMAGE} - ${BATS_TEST_DESCRIPTION}" >> "${ARTIFACT_LOGS_DIR}/${BATS_IMAGE}"
}

# Used in teardown function to store function output in artifacts
function store_output {
  ARTIFACT_LOGS_DIR=${ARTIFACT_LOGS_DIR:-"/tmp/artifacts/logs"}
  # $output is defined in bats `run` command, don't panic @shellcheck
  # shellcheck disable=SC2154
  echo "$output" >> "${ARTIFACT_LOGS_DIR}/${BATS_IMAGE}"
  echo -e "=============== ^^^ [${BATS_TEST_NUMBER}] ${BATS_IMAGE} - ${BATS_TEST_DESCRIPTION}\n" >> "${ARTIFACT_LOGS_DIR}/${BATS_IMAGE}"
  PS4=''
}

function run_docker_binary() {
  trap finish EXIT
  image=${1}
  shift
  args=$*
  set -exu
  docker run --rm -ti "${image}" "${args}"
}

function print_docker_env() {
  set -exu
  trap finish EXIT
  docker run --rm -ti "${1}" env | sort | tee "$ARTIFACT_LOGS_DIR/${BATS_IMAGE}.env"
}

function print_docker_compose_env() {
  set -exu
  trap finish EXIT
  local container="${1}"
  local compose_file="${2:-${BATS_TEST_DIRNAME}/../docker-compose.yml}"
  docker-compose -p "${BATS_IMAGE//[^[:alnum:]_]/}" -f "${2:-${BATS_TEST_DIRNAME}/../docker-compose.yml}" exec "${container}" env | sort | tee "$ARTIFACT_LOGS_DIR/${BATS_IMAGE}_${container}.env"
}

function simple_grep() {
  set -exu
  trap finish EXIT
  grep "$1" "$2"
}

# Queries an endpoint and expects a response to match regular expression parameter
function curl_check_response_regex {
  set -euo pipefail
  trap finish EXIT
  local regex=${1:-"OK"}
  local endpoint=${2:-"http://localhost:80"}
  local container=${3:-$(get_container_id)}

  local interval=1
  local loop=${4:-60}
  until docker run -t --network "container:${container}" --rm "${CURL_CONTAINER}" -s -k -N "${endpoint}" | grep -o "${regex}"
  do
    sleep $interval
    loop=$((loop-1))
    if [[ $loop -lt 1 ]]
    then
      exit 1
    fi
  done
}

# Queries an endpoint and expects a response status code to match parameter
# shellcheck disable=SC2120
function curl_check_status_code {
  set -eu
  trap finish EXIT
  local status_code=${1:-200}
  local endpoint=${2:-"http://localhost:80"}
  local container=${3:-$(get_container_id)}

  local interval=1
  local loop=${4:-60}
  until docker run --network "container:${container}" --rm "${CURL_CONTAINER}" -s -k -o /dev/null -w "%{http_code}" "${endpoint}" | grep "${status_code}"
  do
    sleep $interval
    loop=$((loop-1))
    if [[ $loop -lt 1 ]]
    then
      return 1
    fi
  done
}


# Queries an endpoint and expects a response status code to match parameter
# shellcheck disable=SC2120
function curl_get_response_header {
  set -eu
  trap finish EXIT
  local var=${1:-status}
  local endpoint=${2:-"http://localhost:80"}
  local container=${3:-$(get_container_id)}

  docker run --network "container:${container}" --rm "${CURL_CONTAINER}" -s -k -I "${endpoint}"
}

# Pulls docker image parameter
function pull_image {
  set -eu
  trap finish EXIT
  docker pull "${1:-${image}}"
}

function start_docker_compose {
  set -eu
  trap finish EXIT
  # [[ -z "$1" ]] && fatal "Container name not set"
  local compose_file="${1:-${BATS_TEST_DIRNAME}/../docker-compose.yml}"
  local endpoint="${2:-http://localhost:80}"
  local container="${3:-$(get_container_id)}"

  # Wait (default: 5 = 5 minutes, retrying every 1s
  local loop=${4:-5}
  local interval=1

  docker-compose --no-ansi -p "${BATS_IMAGE//[^[:alnum:]_]/}" -f "${compose_file}" down

  # Start all containers in the compose file
  docker-compose --no-ansi -p "${BATS_IMAGE//[^[:alnum:]_]/}" -f "${compose_file}" up --remove-orphans -d

  # Query the container until a 200 response is returned
  until curl_check_status_code 200 "${endpoint}" "${container}"
  do
    sleep $interval
    loop=$((loop-1))
    if [[ $loop -lt 1 ]]
    then
      docker-compose --no-ansi -p "${BATS_IMAGE//[^[:alnum:]_]/}" -f "$compose_file" stop
      >&2 echo "Timeout without successful connection to ${endpoint} on ${container}"
      >&2 docker-compose --no-ansi -p "${BATS_IMAGE//[^[:alnum:]_]/}" -f "$compose_file" logs
      exit 1
    fi
  done
  # Container is up and running
}

function clean_container {
  set -eu
  trap finish EXIT
  [[ -z "$1" ]] && fatal "Container name not set"
  docker stop "$1"
  # Delete the container, in case it didn't have --rm flag
  yes | docker rm "$1" || true
}

function clean_docker_compose {
  set -eu
  trap finish EXIT
  local compose_file="${1:-${BATS_TEST_DIRNAME}/../docker-compose.yml}"

  docker-compose --no-ansi -p "${BATS_IMAGE//[^[:alnum:]_]/}" -f "${compose_file}" down -v
}

function run_test_image_exists {
  set -eu
  trap finish EXIT
  [[ -z "$1" ]] && fatal "Expected response regex not set"
  local image_regex="$1"
  docker images | grep "${image_regex}"
}

function run_test_container_starts {
  set -eu
  trap finish EXIT
  [[ -z "$1" ]] && fatal "No container name specified"
  [[ -z "$2" ]] && fatal "No image specified"
  local name=$1
  local image=$2
  docker run --rm -d --name "$name" "$image"
}

function start_planet4_docker_compose() {
  set -eu
  trap finish EXIT
  pushd "$BATS_TMPDIR"
  git clone https://github.com/greenpeace/planet4-docker-compose
  cd planet4-docker-compose
  make
  popd
}
