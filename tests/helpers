#!/usr/bin/env bash
set -ae

function finish {
  set +ex
}
trap finish EXIT

function fatal {
  >&2 echo "$1"
  exit 1
}

function begin_output {
  ARTIFACTS_DIR=${ARTIFACTS_DIR:-"/tmp/artifacts"}
  [[ -d "$ARTIFACTS_DIR" ]] || mkdir -p $ARTIFACTS_DIR
  [[ -f "${ARTIFACTS_DIR}/${BATS_IMAGE}" ]] || touch "${ARTIFACTS_DIR}/${BATS_IMAGE}"

  PS4='+($(basename $BASH_SOURCE):${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  echo -e "=============== vvv [${BATS_TEST_NUMBER}] ${BATS_IMAGE} - ${BATS_TEST_DESCRIPTION}" >> "${ARTIFACTS_DIR}/${BATS_IMAGE}"
}

function store_output {
  local string
  # $output is defined in bats `run` command, don't panic @shellcheck
  # shellcheck disable=SC2154
  string=$(echo "${output}" | sed -e "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g")
  echo "$string" >> "${ARTIFACTS_DIR}/${BATS_IMAGE}"
  echo -e "=============== ^^^ [${BATS_TEST_NUMBER}] ${BATS_IMAGE} - ${BATS_TEST_DESCRIPTION}\n" >> "${ARTIFACTS_DIR}/${BATS_IMAGE}"
  PS4=''
}

function pull_image {
  set -ex
  trap finish EXIT
  docker pull "${image}"
}

function start_docker_compose {
  set -ex
  trap finish EXIT
  local compose_file="${1:-${BATS_TEST_DIRNAME}/../docker-compose.yml}"
  local endpoint="${2:-http://localhost:80}"

  # Wait 30s, retry every .1s
  local -i loop=300
  local interval=0.1

  docker-compose --no-ansi -f "${compose_file}" up -d

  until curl -s -o /dev/null -w "%{http_code}" "${endpoint}" | grep -q "200"
  do
    sleep $interval
    loop=$((loop-1))
    if [[ $loop -lt 1 ]]
    then
      docker-compose --no-ansi -f "$compose_file" stop
      >&2 echo "Timeout without successful connection to ${endpoint}"
      >&2 docker-compose --no-ansi -f "$compose_file" logs
      exit 1
    fi
  done
}

function clean_container {
  set -ex
  trap finish EXIT
  [[ -z "$1" ]] && fatal "Container name not set"
  docker stop $1
}

function clean_docker_compose {
  set -ex
  trap finish EXIT
  local compose_file="${1:-${BATS_TEST_DIRNAME}/../docker-compose.yml}"
  docker-compose --no-ansi -f "${compose_file}" stop
  yes | docker-compose --no-ansi -f "${compose_file}" rm
}

function run_test_image_exists {
  set -ex
  trap finish EXIT
  [[ -z "$1" ]] && fatal "Expected response regex not set"
  local image_regex="$1"
  docker images | grep "${image_regex}"
}

function run_test_container_starts {
  set -ex
  trap finish EXIT
  [[ -z "$1" ]] && fatal "No container name specified"
  [[ -z "$2" ]] && fatal "No image specified"
  local name=$1
  local image=$2
  docker run --rm -d --name "$name" "$image"
}

function run_test_http_response_code {
  set -ex
  trap finish EXIT
  local -i response=${1:-"200"}
  local endpoint=${2:-"http://localhost:80"}
  curl -s -k -o /dev/null -w "%{http_code}" "$endpoint" | grep "$response"
}

function run_test_http_response_grep {
  set -ex
  trap finish EXIT
  [[ -z "$1" ]] && fatal "Expected response regex not set"
  local response=$1
  local endpoint=${2:-"http://localhost:80"}
  curl -s -k "$endpoint" | grep "$response"
}
