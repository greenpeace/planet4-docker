#!/usr/bin/env bash
#shellcheck disable=1090
set -euo pipefail

# ----------------------------------------------------------------------------

# MAKE TEMPDIR AND CLEAN ON EXIT

function clean_temp() {
  echo "Removing temp files..."
  rm -fr "$BUILD_TMPDIR"
  echo "Done"
}
trap clean_temp EXIT

BUILD_TMPDIR=$(mktemp -d "${TMPDIR:-/tmp}/XXXXXXXXXXXX")

# ----------------------------------------------------------------------------

# Find real file path of current script
# https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within

if [[ -z "${GIT_ROOT_DIR:-}" ]]; then
  source="${BASH_SOURCE[0]}"
  while [[ -L "$source" ]]; do # resolve $source until the file is no longer a symlink
    dir="$(cd -P "$(dirname "$source")" && pwd)"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  GIT_ROOT_DIR="$(cd -P "$(dirname "$source")/.." && pwd)"
  export GIT_ROOT_DIR
fi
# ----------------------------------------------------------------------------

# LOAD PRETTY PRINT HELPER
pretty_print_url="https://gist.githubusercontent.com/27Bslash6/ffa9cfb92c25ef27cad2900c74e2f6dc/raw/4baf03fccb0125518738214623ef96957b4e3ef4/bash-pretty-print.sh"
curl -s "${pretty_print_url}" -o "${BUILD_TMPDIR}/pretty_print.sh"
. "${BUILD_TMPDIR}/pretty_print.sh"
rm "${BUILD_TMPDIR}/pretty_print.sh"

# ----------------------------------------------------------------------------

# VARIABLE ASSIGNMENT

bash_version=$(bash --version | head -n 1 | cut -d' ' -f4 | cut -d '.' -f 1)

env_parameters=()
config_pass=0

function contains() {
  local n=$#
  local value=${!n}
  for ((i = 1; i < $#; i++)); do
    if [ "${!i}" == "${value}" ]; then
      echo "y"
      return 0
    fi
  done
  echo "n"
  return 1
}

# Reads key-value file as function argument, assigns variable to environment
function set_vars() {
  local file
  file="${1}"
  _build "Config pass #$config_pass"
  while read -r line; do
    # Skip comments
    [[ $line == \#* ]] && continue
    # Skip lines that don't include an assignment =
    [[ $line =~ = ]] || continue
    # Fetch the key, whitespace trimmed
    key="$(echo "$line" | cut -d'=' -f1 | xargs)"
    # Fetch the value, whitespace trimmed
    value="$(echo "$line" | cut -d'=' -f2- | xargs)"

    # Current value
    set +u
    if [[ ${!key} ]]; then
      current="${!key}"
    else
      current=
    fi

    if [[ -z "$current" ]] || [[ $config_pass -gt 0 ]]; then
      # Skip any variables set in the environment
      #[[ $(contains "${env_parameters[@]}" $key) == "y" ]] && _build "[ENV] $key=${!key}" && continue
      # This key is not set yet
      if [[ $bash_version -lt 4 ]]; then
        # Urgh, eval is evil
        eval "${line}"
      else
        declare -g "$key=$value"
      fi

      if [[ $value != "${current}" ]]; then
        _notice " ++ $key=$value"
      else
        _notice " -- $key=$value"
      fi
    else
      _notice "[ENV] $key=${!key}"
      env_parameters+=($key)
    fi
  done <"${file}"
  let config_pass+=1
  export config_pass
  printf "\n"
  set -u

}

# ----------------------------------------------------------------------------

# LOAD DEFAULT CONFIGURATION

# Read parameters from key=value configuration file
# Note this will override environment variables at this stage
# @todo prioritise ENV over config file ?

default_config="${GIT_ROOT_DIR}/config.default"
if [[ -f "${default_config}" ]]; then
  set_vars "${default_config}"
fi

# ----------------------------------------------------------------------------

# UTILITY

function usage() {
  echo "Usage: $(basename "$0") [OPTION|OPTION2] [<image build list>|all]...
Build and test artifacts in this repository

Options:
  -c    Configuration file for build variables, eg:
          $(basename "$0") -c config
  -h    Help information (this text)
  -l    Local docker build
  -p    Pull images after build
  -r    Remote docker build on Google Container Registry
  -v    Verbose output
"
}

# COMMAND LINE OPTIONS

OPTIONS=':vc:lhpr'
while getopts $OPTIONS option; do
  case $option in
    c) # shellcheck disable=SC2034
      CONFIG_FILE=$OPTARG ;;
    l) BUILD_LOCALLY=true ;;
    h)
      usage
      exit 0
      ;;
    p) PULL_IMAGES=true ;;
    r) BUILD_REMOTELY=true ;;
    v)
      verbosity=debug
      _verbose_debug on
      ;;
    *)
      echo "Unkown option: ${OPTARG}"
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1))

# ----------------------------------------------------------------------------

# LOAD CUSTOM CONFIGURATION
set +u
if [[ ! -z "${CONFIG_FILE}" ]]; then
  echo "Reading configuration from ${CONFIG_FILE}"

  if [[ ! -f "${CONFIG_FILE}" ]]; then
    _fatal "File not found: ${CONFIG_FILE}"
  fi
  # https://github.com/koalaman/shellcheck/wiki/SC1090
  set_vars "${CONFIG_FILE}"
fi

# ----------------------------------------------------------------------------
# Configure build variables based on CircleCI environment vars

if [[ "${CIRCLECI:-}" ]]; then
  BUILD_NUM=${BUILD_NUM:-"build-${CIRCLE_BUILD_NUM}"}

  if [[ -z "${BUILD_TAG:-}" ]]; then
    BUILD_TAG="${CIRCLE_TAG:-$CIRCLE_BRANCH}"
  fi

fi

BRANCH_NAME_RAW=${CIRCLE_BRANCH:-$(git rev-parse --abbrev-ref HEAD)}
BRANCH_NAME=${BRANCH_NAME_RAW//[^a-zA-Z0-9\._-]/-}

BUILD_NUM=${BUILD_NUM:-"test-${USER}-$(hostname -s)"}
BUILD_NUM=${BUILD_NUM//[^a-zA-Z0-9\._-]/-}
BUILD_TAG=${BUILD_TAG:-${BRANCH_NAME}}
BUILD_TAG=${BUILD_TAG//[^a-zA-Z0-9\._-]/-}
REVISION_TAG=${REVISION_TAG:-$(git rev-parse --short HEAD)}
SOURCE_VERSION=${SOURCE_VERSION:-${BUILD_TAG}}
SOURCE_VERSION=${SOURCE_VERSION//[^a-zA-Z0-9\._-]/-}
